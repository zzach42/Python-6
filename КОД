class DominoNode:
    #узел двусвязного списка для хранения кости домино

    def __init__(self, value):
        self.value = value 
        self.prev = None  
        self.next = None  
        self.used = False 


class DominoLinkedList:
    #класс двусвязного списка для хранения набора костей домино

    def __init__(self):
        self.head = None
        self.tail = None
        self.length = 0

    def add(self, value):
        #добавление кости в конец списка
        new_node = DominoNode(value)

        if not self.head:
            self.head = new_node
            self.tail = new_node
        else:
            self.tail.next = new_node
            new_node.prev = self.tail
            self.tail = new_node
        self.length += 1

    def find(self, a, b):
        #поиск кости с заданными значениями 
        current = self.head
        while current:
            x, y = map(int, current.value)
            if (x == a and y == b) or (y == a and x == b):
                return current
            current = current.next
        return None


class DominoChainSolver:
    #класс для проверки возможности построения цепи

    def __init__(self, linked_list):
        self.linked_list = linked_list
        self.graph = self._build_graph()

    def _build_graph(self):
        # построение графа смежности
        graph = {}
        current = self.linked_list.head
        while current:
            a, b = map(int, current.value)
            graph.setdefault(a, []).append(b)
            graph.setdefault(b, []).append(a)
            current = current.next
        return graph

    def _find_eulerian_path(self):
        #поиск эйлерова пути
        degrees = {node: len(edges) for node, edges in self.graph.items()}
        odd_nodes = [node for node in degrees if degrees[node] % 2 != 0]

        if len(odd_nodes) not in (0, 2):
            return None

        start_node = odd_nodes[0] if odd_nodes else next(iter(self.graph.keys()))
        path = []
        stack = [start_node]
        temp_graph = {k: v.copy() for k, v in self.graph.items()}

        while stack:
            current = stack[-1]
            if temp_graph.get(current):
                next_node = temp_graph[current].pop()
                temp_graph[next_node].remove(current)
                stack.append(next_node)
            else:
                path.append(stack.pop())

        return path[::-1] if len(path) == self.linked_list.length + 1 else None

    def solve(self):
        #проверка возможности построения цепи
        path = self._find_eulerian_path()
        if not path:
            return None

        chain = []
        for i in range(len(path) - 1):
            a, b = path[i], path[i + 1]
            node = self.linked_list.find(a, b)
            if node and not node.used:
                node.used = True
                if node.value[0] == str(a):
                    chain.append(node.value)
                else:
                    chain.append(node.value[::-1])
        return chain if len(chain) == self.linked_list.length else None


class DominoGame:
    #класс игры

    def __init__(self):
        self.list = DominoLinkedList()

    def run(self):
        # основной игровой цикл
        print("╔════════════════════════════════════╗")
        print("║      ДОМИНО: ПРОВЕРКА ЦЕПИ        ║")
        print("╚════════════════════════════════════╝")
        print("Введите кости домино через запятую (например: 12, 34, 56)")

        while True:
            try:
                input_str = input("> ").strip()
                if not input_str:
                    print("Ошибка: введите хотя бы одну кость!")
                    continue

                self._process_input(input_str)
                chain = self._solve_chain()
                self._print_result(chain)

            except ValueError as e:
                print(f"Ошибка: {e}")
            except KeyboardInterrupt:
                print("\nИгра завершена.")
                break
            except Exception as e:
                print(f"Неожиданная ошибка: {e}")

    def _process_input(self, input_str):
        #обработка ввода пользователя
        self.list = DominoLinkedList()  # сброс предыдущего списка

        for item in input_str.split(","):
            value = item.strip()
            if not value:
                continue
            if len(value) != 2 or not value.isdigit():
                raise ValueError(f"Некорректная кость: {value}")
            a, b = map(int, value)
            if not (0 <= a <= 6 and 0 <= b <= 6):
                raise ValueError(f"Значения кости должны быть от 0 до 6")
            self.list.add(value)

        if not self.list.head:
            raise ValueError("Не введено ни одной кости")

    def _solve_chain(self):
        #попытка построить цепь
        solver = DominoChainSolver(self.list)
        return solver.solve()

    def _print_result(self, chain):
        #вывод результата
        if chain:
            result = "Можно: " + ", ".join(chain)
            border = "═" * (len(result) + 2)
            print(f"\nРезультат:\n╔{border}╗\n║ {result} ║\n╚{border}╝\n")
        else:
            print("\nРезультат: Нельзя выложить в ряд\n")


# запуск программы
if __name__ == "__main__":
    game = DominoGame()
    game.run()
